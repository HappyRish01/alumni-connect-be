// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String          @id @default(uuid())
  username                   String          @unique
  email                      String          @unique
  password                   String
  role                       ROLE            @default(STUDENT)
  profileImage               String          @default("https://ibb.co/5W6TpnY")
  created_at                 DateTime        @default(now())
  studentProfile             StudentProfile? //1o1 with StudentProfile
  alumniProfile              AlumniProfile? // 101 with alumni profile
  sentConnectionRequests     Connection[]    @relation("SentConnections")
  receivedConnectionRequests Connection[]    @relation("ReceivedConnections")
  posts                      Post[]
  postLikes                      PostLike[]
  commentLikes CommentLike[]
  comments                   Comment[]
  updatedAt                  DateTime        @updatedAt
}

enum ROLE {
  STUDENT
  ALUMNI
}

enum STATUS {
  PENDING
  ACCEPTED
  REJECTED
}

model StudentProfile {
  name        String   @default("")
  DOB         String   @default("")
  course      String   @default("")
  skills      String[]
  internships String[]
  urls        String[]
  batch       String   @default("")
  userId      String   @id @unique
  user        User     @relation(fields: [userId], references: [id])
}


model AlumniProfile {
  name     String @default("")
  DOB      String @default("")
  course   String @default("")
  batch    String @default("")
  jobTitle String @default("")
  company  String @default("")
  userId   String @id @unique
  user     User   @relation(fields: [userId], references: [id])
}


model Connection {
  id         String   @id @default(uuid())
  senderId   String
  sender     User     @relation("SentConnections", fields: [senderId], references: [id])
  receiverId String
  receiver   User     @relation("ReceivedConnections", fields: [receiverId], references: [id])
  status     STATUS   @default(PENDING)
  createdAt  DateTime @default(now())

  @@unique([senderId, receiverId])
  @@index([senderId, receiverId])
}

model Post {
  id         String    @id @default(uuid())
  content    String
  caption    String?
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  likesCount Int       @default(0)
  likes      PostLike[]
  comments   Comment[]
  createdAt  DateTime  @default(now())
}


model Comment {
  id        String   @id @default(uuid())
  comment   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  likesCount Int @default(0)
  likes     CommentLike[]
}


model PostLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post    @relation(fields: [postId], references: [id])
  @@unique([userId, postId])
}

model CommentLike {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id])
  @@unique([userId, commentId])
}
